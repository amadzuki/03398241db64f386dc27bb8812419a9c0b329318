{"version":3,"sources":["config/dayjs.js","components/BaseStylings.js","components/Navigation.js","components/DatePicker.js","components/MealToggle.js","components/Card.js","pages/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["dayjs","locale","Text","styled","p","SubText","SeparatorLine","div","CenterContent","Wrapper","NavigationStyled","IconImg","imgBox","TextsGroup","LabelText","DestinationBox","DestinationText","Navigation","src","process","alt","height","DatePickerStyled","DateButton","button","DayName","props","opacity","color","DateNumber","DatePicker","chosenDate","setDate","dateArray","map","date","index","isWeekend","format","validateWeekend","isChosenDate","key","onClick","className","disabled","MealToggleStyled","MealButton","MealText","MealToggle","currentMeal","setMeal","CardWrapper","CardImg","img","CardInfos","RatingInfo","RatingNumber","RatingStars","ItemName","MerchantName","ItemPrice","Box","AddButton","Card","item","imagePath","rating","name","merchant","price","ProductList","useState","meal","items","theme","colors","primary","secondary","mainText","subText","subtle","outlineBorder","fonts","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8786982.chunk.js","sourcesContent":["import dayjs from 'dayjs'\nimport 'dayjs/locale/id'\n\ndayjs.locale('id')\n\n// import updateLocale from 'dayjs/plugin/updateLocale'\n// dayjs.extend(updateLocale)\n\n// dayjs.updateLocale('en', {\n//   weekdays: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'],\n// })\n\nexport default dayjs\n","import styled from '@xstyled/styled-components'\n\nexport const Text = styled.p`\n  font-family: primary;\n  font-weight: 600;\n  font-size: 14px;\n  color: mainText;\n`\n\nexport const SubText = styled.p`\n  font-family: primary;\n  font-weight: 600;\n  font-size: 14px;\n  color: subText;\n`\n\nexport const SeparatorLine = styled.div`\n  width: 95vw;\n  border-bottom: 1px solid;\n  border-bottom-color: subtle;\n  box-shadow: 0 8px 10px 0 rgba(10, 31, 68, 0.1);\n`\n\nexport const CenterContent = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nexport const Wrapper = styled.div`\n  margin: 0 16px;\n  display: flex;\n  flex-wrap: wrap;\n`\n","import React from 'react'\nimport styled from '@xstyled/styled-components'\n\nimport { Text, SubText } from './BaseStylings'\n\nconst NavigationStyled = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 16px 0 0 16px;\n`\n\nconst IconImg = styled.imgBox`\n  height: 30px;\n`\n\nconst TextsGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 8px;\n`\nconst LabelText = styled(SubText)`\n  margin: 4px 8px;\n  font-size: 8px;\n`\n\nconst DestinationBox = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst DestinationText = styled(Text)`\n  margin: 0 8px;\n`\n\nconst Navigation = () => {\n  return (\n    <NavigationStyled>\n      <IconImg\n        src={`${process.env.PUBLIC_URL}/icons/arrow-left.svg`}\n        alt='arrow left icon'\n      ></IconImg>\n      <TextsGroup>\n        <LabelText>ALAMAT PENGANTARAN</LabelText>\n        <DestinationBox>\n          <DestinationText>Tokopedia Tower</DestinationText>\n          <IconImg\n            src={`${process.env.PUBLIC_URL}/icons/arrow-down.svg`}\n            alt='arrow down icon'\n            height='16px'\n          />\n        </DestinationBox>\n      </TextsGroup>\n    </NavigationStyled>\n  )\n}\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@xstyled/styled-components'\n\nimport dayjs from '../config/dayjs'\nimport dateArray from '../data/dateArray.json'\n\nimport { Text, SubText } from './BaseStylings'\n\nconst DatePickerStyled = styled.div`\n  display: flex;\n  overflow-x: scroll;\n  margin: 24px 0 4px 0;\n`\nconst DateButton = styled.button`\n  padding: 7px 14px;\n  margin: 0 8px;\n  border: none;\n  background: none;\n\n  &.chosenDate {\n    border-radius: 50%;\n    background-color: mainText;\n  }\n  &:focus {\n    outline: none;\n  }\n`\nconst DayName = styled(SubText)`\n  margin: 0;\n  font-size: 8px;\n  opacity: ${(props) => props.opacity};\n  color: ${(props) => props.color};\n`\nconst DateNumber = styled(Text)`\n  margin: 0;\n  font-size: 14px;\n  opacity: ${(props) => props.opacity};\n  color: ${(props) => props.color};\n`\nconst DatePicker = ({ chosenDate, setDate }) => {\n  const validateWeekend = (date) =>\n    dayjs(date).format('dddd') === 'Sabtu' ||\n    dayjs(date).format('dddd') === 'Minggu'\n      ? true\n      : false\n\n  return (\n    <DatePickerStyled>\n      {dateArray.map((date, index) => {\n        const isWeekend = validateWeekend(date)\n        const isChosenDate = date === chosenDate ? true : false\n        return (\n          <DateButton\n            key={index}\n            onClick={() => setDate(date)}\n            className={isChosenDate && 'chosenDate'}\n            disabled={isWeekend && true}\n          >\n            <DayName\n              opacity={isWeekend ? '0.3' : '1'}\n              color={isChosenDate ? 'white' : ''}\n            >\n              {dayjs(date).format('ddd')}\n            </DayName>\n            <DateNumber\n              opacity={isWeekend ? '0.3' : '1'}\n              color={isChosenDate ? 'white' : ''}\n            >\n              {dayjs(date).format('DD')}\n            </DateNumber>\n          </DateButton>\n        )\n      })}\n    </DatePickerStyled>\n  )\n}\n\nDatePicker.propTypes = {\n  setDate: PropTypes.func.isRequired,\n  chosenDate: PropTypes.string.isRequired,\n}\n\nexport default DatePicker\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@xstyled/styled-components'\n\nimport { Text } from './BaseStylings'\n\nconst MealToggleStyled = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 4px 0 32px 0;\n`\n\nconst MealButton = styled.button`\n  background: none;\n  border: 1px solid grey;\n  border-radius: 5px;\n  padding: 8px 64px;\n  box-shadow: 0 8px 10px 0 rgba(10, 31, 68, 0.1);\n\n  &.lunch {\n    border-right: none;\n    border-radius: 5px 0 0 5px;\n  }\n  &.dinner {\n    border-radius: 0 5px 5px 0;\n  }\n  &.active {\n    background-color: mainText;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`\n\nconst MealText = styled(Text)`\n  margin: 0;\n  color: ${(props) => props.color};\n`\n\nconst MealToggle = ({ currentMeal, setMeal }) => {\n  return (\n    <MealToggleStyled>\n      <MealButton\n        className={currentMeal === 'lunch' ? 'lunch active' : 'lunch'}\n        onClick={() => setMeal('lunch')}\n      >\n        <MealText color={currentMeal === 'lunch' ? 'white' : 'grey'}>\n          Lunch\n        </MealText>\n      </MealButton>\n      <MealButton\n        className={currentMeal === 'dinner' ? 'dinner active' : 'dinner'}\n        onClick={() => setMeal('dinner')}\n      >\n        <MealText color={currentMeal === 'dinner' ? 'white' : 'grey'}>\n          Dinner\n        </MealText>\n      </MealButton>\n    </MealToggleStyled>\n  )\n}\n\nMealToggle.propTypes = {\n  currentMeal: PropTypes.string.isRequired,\n  setMeal: PropTypes.func.isRequired,\n}\n\nexport default MealToggle\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from '@xstyled/styled-components'\n\nimport { Text, SubText } from '../components/BaseStylings'\n\nconst CardWrapper = styled.div`\n  margin-bottom: 24px;\n  max-width: 335px;\n  box-shadow: 0 8px 10px 0 rgba(10, 31, 68, 0.1);\n`\n\nconst CardImg = styled.img`\n  width: 335px;\n  height: 240px;\n`\n\nconst CardInfos = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n`\n\nconst RatingInfo = styled.div`\n  display: flex;\n`\n\nconst RatingNumber = styled(Text)`\n  margin: 0 0 4px 0;\n`\n\nconst RatingStars = styled.div`\n  display: flex;\n`\n\nconst ItemName = styled(Text)`\n  margin: 4px 0;\n`\n\nconst MerchantName = styled(SubText)`\n  font-size: 12px;\n  margin: 4px 0 8px 0;\n`\n\nconst ItemPrice = styled(Text)`\n  margin: 8px 0;\n`\n\nconst Box = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst AddButton = styled.button`\n  border: none;\n  background-color: primary;\n  font-family: primary;\n  font-weight: 600;\n  color: subtle;\n  padding: 8px 16px;\n  border-radius: 5px;\n`\n\nconst Card = ({ item }) => {\n  return (\n    <CardWrapper>\n      <CardImg src={process.env.PUBLIC_URL + item.imagePath} />\n      <CardInfos>\n        <RatingInfo>\n          <RatingNumber>{item.rating}</RatingNumber>\n          <RatingStars></RatingStars>\n        </RatingInfo>\n        <ItemName>{item.name}</ItemName>\n        <MerchantName>{item.merchant}</MerchantName>\n        <Box>\n          <ItemPrice>{item.price}</ItemPrice>\n          <AddButton>ADD +</AddButton>\n        </Box>\n      </CardInfos>\n    </CardWrapper>\n  )\n}\n\nCard.propTypes = {\n  item: PropTypes.object.isRequired,\n}\n\nexport default Card\n","import React, { useState } from 'react'\nimport dayjs from '../config/dayjs'\n\nimport Navigation from '../components/Navigation'\nimport DatePicker from '../components/DatePicker'\nimport MealToggle from '../components/MealToggle'\nimport Card from '../components/Card'\nimport {\n  Text,\n  SeparatorLine,\n  CenterContent,\n  Wrapper,\n} from '../components/BaseStylings'\n\nimport items from '../data/items.json'\n\nconst ProductList = () => {\n  const [date, setDate] = useState('2020-09-27')\n  const [meal, setMeal] = useState('lunch')\n\n  return (\n    <>\n      <Navigation></Navigation>\n      <DatePicker setDate={setDate} chosenDate={date} />\n      <CenterContent>\n        <SeparatorLine />\n      </CenterContent>\n      <MealToggle currentMeal={meal} setMeal={setMeal} />\n      <Wrapper>\n        <Text>{dayjs(date).format('dddd, DD MMMM YYYY')}</Text>\n      </Wrapper>\n      <Wrapper>\n        {items.map((item, index) => (\n          <Card key={index} item={item} />\n        ))}\n      </Wrapper>\n    </>\n  )\n}\n\nexport default ProductList\n","import React from 'react'\nimport { ThemeProvider } from '@xstyled/styled-components'\nimport ProductList from './pages/ProductList'\n\nconst theme = {\n  colors: {\n    primary: '#F9423A',\n    secondary: '#A23530',\n    mainText: '#424749',\n    subText: '#6E7679',\n    subtle: '#e2e4e4',\n    outlineBorder: '#f1f1f2',\n  },\n  fonts: {\n    primary: 'Noto Sans',\n  },\n}\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <ProductList></ProductList>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}