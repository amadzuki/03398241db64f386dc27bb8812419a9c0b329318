{"version":3,"sources":["components/Texts.js","components/Navigation.js","components/DatePicker.js","config/dayjs.js","pages/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["Text","styled","p","SubText","NavigationStyled","div","IconImg","imgBox","TextsGroup","LabelText","DestinationBox","DestinationText","Navigation","src","process","alt","height","DatePicker","setDate","dateArray","map","date","index","key","onClick","dayjs","extend","updateLocale","weekdays","ProductList","useState","format","theme","colors","primary","secondary","mainText","subText","iconBackground","outlineBorder","fonts","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2tBAEO,IAAMA,EAAOC,IAAOC,EAAV,KAMJC,EAAUF,IAAOC,EAAV,K,oqBCHpB,IAAME,EAAmBH,IAAOI,IAAV,KAMhBC,EAAUL,IAAOM,OAAV,KAIPC,EAAaP,IAAOI,IAAV,KAKVI,EAAYR,YAAOE,EAAPF,CAAH,KAKTS,EAAiBT,IAAOI,IAAV,KAKdM,EAAkBV,YAAOD,EAAPC,CAAH,KA0BNW,EAtBI,WACjB,OACE,kBAACR,EAAD,KACE,kBAACE,EAAD,CACEO,IAAG,UAAKC,4CAAL,yBACHC,IAAI,oBAEN,kBAACP,EAAD,KACE,kBAACC,EAAD,2BACA,kBAACC,EAAD,KACE,kBAACC,EAAD,wBACA,kBAACL,EAAD,CACEO,IAAG,UAAKC,4CAAL,yBACHC,IAAI,kBACJC,OAAO,a,QC3BJC,EAhBI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACE,oCACGC,EAAUC,KAAI,SAACC,EAAMC,GAAP,OACb,4BAAQC,IAAKD,EAAOE,QAAS,kBAAMN,EAAQG,KACxCA,Q,iCCRXI,IAAMC,OAAOC,KAEbF,IAAME,aAAa,KAAM,CACvBC,SAAU,CAAC,SAAU,QAAS,SAAU,OAAQ,QAAS,QAAS,WAGrDH,QAAf,ECSeI,EAZK,WAAO,IAAD,EACAC,mBAAS,cADT,mBACjBT,EADiB,KACXH,EADW,KAGxB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,QAASA,IACrB,2CAAiBO,EAAMJ,GAAMU,OAAO,yBCRpCC,EAAQ,CACZC,OAAQ,CACNC,QAAS,UACTC,UAAW,UACXC,SAAU,UACVC,QAAS,UACTC,eAAgB,UAChBC,cAAe,WAEjBC,MAAO,CACLN,QAAS,cAYEO,EARH,WACV,OACE,kBAAC,IAAD,CAAeT,MAAOA,GACpB,kBAAC,EAAD,QCTcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ecb4d2a.chunk.js","sourcesContent":["import styled from '@xstyled/styled-components'\n\nexport const Text = styled.p`\n  font-family: primary;\n  font-weight: 600;\n  color: mainText;\n`\n\nexport const SubText = styled.p`\n  font-family: primary;\n  font-weight: 600;\n  color: subText;\n`\n","import React from 'react'\nimport styled from '@xstyled/styled-components'\n\nimport { Text, SubText } from './Texts'\n\nconst NavigationStyled = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 16px 0 0 16px;\n`\n\nconst IconImg = styled.imgBox`\n  height: 30px;\n`\n\nconst TextsGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 8px;\n`\nconst LabelText = styled(SubText)`\n  margin: 4px 8px;\n  font-size: 8px;\n`\n\nconst DestinationBox = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst DestinationText = styled(Text)`\n  margin: 0 8px;\n`\n\nconst Navigation = () => {\n  return (\n    <NavigationStyled>\n      <IconImg\n        src={`${process.env.PUBLIC_URL}/icons/arrow-left.svg`}\n        alt='arrow left icon'\n      ></IconImg>\n      <TextsGroup>\n        <LabelText>ALAMAT PENGANTARAN</LabelText>\n        <DestinationBox>\n          <DestinationText>Tokopedia Tower</DestinationText>\n          <IconImg\n            src={`${process.env.PUBLIC_URL}/icons/arrow-down.svg`}\n            alt='arrow down icon'\n            height='16px'\n          />\n        </DestinationBox>\n      </TextsGroup>\n    </NavigationStyled>\n  )\n}\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport dateArray from '../data/dateArray.json'\n\nconst DatePicker = ({ setDate }) => {\n  return (\n    <>\n      {dateArray.map((date, index) => (\n        <button key={index} onClick={() => setDate(date)}>\n          {date}\n        </button>\n      ))}\n    </>\n  )\n}\n\nDatePicker.propTypes = {\n  setDate: PropTypes.func.isRequired,\n}\n\nexport default DatePicker\n","import dayjs from 'dayjs'\nimport updateLocale from 'dayjs/plugin/updateLocale'\ndayjs.extend(updateLocale)\n\ndayjs.updateLocale('en', {\n  weekdays: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'],\n})\n\nexport default dayjs\n","import React, { useState } from 'react'\nimport Navigation from '../components/Navigation'\nimport DatePicker from '../components/DatePicker'\nimport dayjs from '../config/dayjs'\n\nconst ProductList = () => {\n  const [date, setDate] = useState('2020-09-27')\n\n  return (\n    <>\n      <Navigation></Navigation>\n      <DatePicker setDate={setDate}></DatePicker>\n      <p>chosen date: {dayjs(date).format('dddd, DD MMMM YYYY')}</p>\n    </>\n  )\n}\n\nexport default ProductList\n","import React from 'react'\nimport { ThemeProvider } from '@xstyled/styled-components'\nimport ProductList from './pages/ProductList'\n\nconst theme = {\n  colors: {\n    primary: '#F9423A',\n    secondary: '#A23530',\n    mainText: '#424749',\n    subText: '#6E7679',\n    iconBackground: '#e2e4e4',\n    outlineBorder: '#f1f1f2',\n  },\n  fonts: {\n    primary: 'Noto Sans',\n  },\n}\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <ProductList></ProductList>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}